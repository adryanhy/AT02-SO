#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int num_pag;
} Page;

void fifo(Page pages[], int num_pages, int page_number, int* falta_paginas) {
    int found = 0;
    for (int i = 0; i < num_pages; i++) {
        if (pages[i].num_pag == page_number) {
            found = 1;
            break;
        }
    }

    if (!found) {
        pages[0].num_pag = page_number;
        (*falta_paginas)++;
    }
}

int main() {
    int num_paginas;

    printf("Digite a quantidade de paginas: ");
    scanf("%d", &num_paginas);

    if (num_paginas <= 0) {
        printf("A quantidade de paginas deve ser maior que zero.\n");
        return 1;
    }

    Page* pages = malloc(num_paginas * sizeof(Page));

    if (pages == NULL) {
        printf("Erro na alocacao de memoria.\n");
        return 1;
    }

    for (int i = 0; i < num_paginas; i++) {
        pages[i].num_pag = -1;
    }

    int num_references;
    printf("Digite a quantidade de referencias a pagina: ");
    scanf("%d", &num_references);

    int* page_references = malloc(num_references * sizeof(int));

    if (page_references == NULL) {
        printf("Erro na alocacao de memoria.\n");
        free(pages);
        return 1;
    }

    printf("Digite as referencias a pagina:\n");
    for (int i = 0; i < num_references; i++) {
        scanf("%d", &page_references[i]);
    }

    int qtdFaltaPaginas = 0;

    for (int i = 0; i < num_references; i++) {
        fifo(pages, num_paginas, page_references[i], &qtdFaltaPaginas);

        printf("Paginas: ");
        for (int j = 0; j < num_paginas; j++) {
            if (pages[j].num_pag == -1) {
                printf(" - ");
            } else {
                printf("%d ", pages[j].num_pag);
            }
        }
        printf("\n");
    }

    printf("Quantidade de falta de pagina: %d\n", qtdFaltaPaginas);

    free(pages);
    free(page_references);

    return 0;
}

